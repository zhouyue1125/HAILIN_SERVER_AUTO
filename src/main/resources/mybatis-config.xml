<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 一定要按照顺序来配置，不然dtd会报错 -->
<configuration>

	<!-- mybatis运行时的设置，很重要 -->
	<settings>
		<!-- 是否开启缓存，二级缓存按照namespace区分，默认true -->
		<setting name="cacheEnabled" value="true" />
		<!-- 是否开启懒加载，会取代fetchType属性，默认false -->
		<setting name="lazyLoadingEnabled" value="false" />
		<!-- 如果开启，懒加载对象通过懒加载配置获得，否则的话按需获得，默认true -->
		<setting name="aggressiveLazyLoading" value="true" />
		<!-- 允许或不允许多个结果集返回从一个语句(兼容的驱动程序需要)，默认true -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!-- 使用的列标签而不是列名。默认true -->
		<setting name="useColumnLabel" value="true" />
		<!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。默认false -->
		<setting name="useGeneratedKeys" value="false" />
		<!-- 指定MyBatis 是否并且如何来自动映射数据表字段与对象的属性。NONE 不映射，PARTIAL将只自动映射简单的，没有嵌套的结果。FULL 
			将自动映射所有复杂的结果。默认PARTIAL -->
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- 指定行为,当检测到一个未知的列(或未知的属性类型)的自动映射的目标。没有:什么都不做警告:输出警告日志('org.apache.ibatis.session的日志级别。AutoMappingUnknownColumnBehavior 
			'must设置警告)失败:失败映射(扔SqlSessionException)，默认NONE -->
		<setting name="autoMappingUnknownColumnBehavior" value="NONE" />
		<!-- 配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用 REUSE, 预处理语句。BATCH 执行器重用语句 
			BATCH 和批量更新，默认SIMPLE -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<!-- 设置超时时间 -->
		<setting name="defaultStatementTimeout" value="60000" />
		<!-- 设置查询返回值数量，可以被查询数值覆盖，可以被查询覆盖 -->
		<setting name="defaultFetchSize" value="100" />
		<!-- 允许在嵌套语句中使用分页，默认false -->
		<setting name="safeRowBoundsEnabled" value="false" />
		<setting name="safeResultHandlerEnabled" value="true" />
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 
			的类似映射。默认false -->
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 
			默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 
			的不同调用将不会共享数据。 -->
		<setting name="localCacheScope" value="SESSION" />
		<!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 
			NULL、VARCHAR OTHER。 -->
		<setting name="jdbcTypeForNull" value="OTHER" />
		<!-- 指定哪个对象的方法触发一次延迟加载。 -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 指定所使用的语言默认为动态SQL生成。 -->
		<!-- <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLDynamicLanguageDriver" 
			/> -->
		<setting name="callSettersOnNulls" value="false" />
		<!-- 指定的前缀字串，MyBatis将会增加记录器的名称。 -->
		<setting name="logPrefix" value="mybatis" />
		<!-- 指定MyBatis的日志实现使用。如果此设置是不存在的记录的实施将自动查找。-->
		 <setting name="logImpl" value="STDOUT_LOGGING" /> 
		<!-- 指定代理工具，MyBatis将会使用创建懒加载能力的对象。 -->
		<setting name="proxyFactory" value="JAVASSIST" />
		<setting name="callSettersOnNulls" value="true"/>
	</settings>
	
	<!-- 为java类型指定一个别名 -->
	<typeAliases>
		<!-- <typeAlias type="com.shenqi.entiy.Users" alias="users"/> -->
		<!-- 会查找这个包下面的实体类，如果没有找到@Alias("")注解，那么就以类名称为别名，找到了@Alias("")注解，就用注解的名称。 -->
		<package name="org.hailin.entity" />
	</typeAliases>
	<plugins>
		<!-- com.github.pagehelper为PageHelper类所在包名 -->
		<plugin interceptor="com.github.pagehelper.PageHelper">
			<property name="dialect" value="mysql"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			<!-- 和startPage中的pageNum效果一样-->
			<property name="offsetAsPageNum" value="true"/>
			<!-- 该参数默认为false -->
			<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
			<property name="rowBoundsWithCount" value="true"/>
			<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
			<property name="pageSizeZero" value="true"/>
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
			<property name="reasonable" value="false"/>
			<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 -->
			<!-- 不理解该含义的前提下，不要随便复制该配置 -->
			<property name="params" value="pageNum=start;pageSize=limit;"/>
			<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			<property name="returnPageInfo" value="check"/>
		</plugin>
	</plugins>
</configuration>